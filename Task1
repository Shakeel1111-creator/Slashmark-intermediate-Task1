//EMPLOYEE

public class Employee {

	private int id;
	private String name;
	private int  age;
	private String desiganation;
	private String department;
	private double salary;

	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public String getDesiganation() {
		return desiganation;
	}
	public void setDesiganation(String desiganation) {
		this.desiganation = desiganation;
	}
	public String getDepartment() {
		return department;
	}
	public void setDepartment(String department) {
		this.department = department;
	}
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", age=" + age + ", desiganation=" + desiganation
				+ ", department=" + department + ", salary=" + salary + "]";
	}
	public Employee(int id, String name, int age, String desiganation, String department, double salary) {
		super();
		this.id = id;
		this.name = name;
		this.age = age;
		this.desiganation = desiganation;
		this.department = department;
		this.salary = salary;
	}

//Employee.service


import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;
import java.util.TreeSet;

public class EmployeeService {

	HashSet<Employee> empset=new HashSet<Employee>();

	Employee emp1=new Employee(101, "Shital", 24, "Developer", "IT", 25000);
	Employee emp2=new Employee(102, "Meena", 26, "Tester","CO", 57000);
	Employee emp3=new Employee(103, "Bob", 20, "DevOps Eng","Admin", 5000);
	Employee emp4=new Employee(104, "Max", 27, "System Eng","CO",  70000);

	Scanner sc=new Scanner(System.in);
	boolean found=false;
	int id;
	String name;
	int age;
	String department;
	String desiganation;
	double sal;

	public EmployeeService() {

		empset.add(emp1);
		empset.add(emp2);
		empset.add(emp3);
		empset.add(emp4);

	}

	//view all employees
	public void viewAllEmps() {
		for(Employee emp:empset) {
			System.out.println(emp);
		}
	}
	//view emp based on there id
	public void viewEmp(){

		System.out.println("Enter id: ");
		id=sc.nextInt();
		for(Employee emp:empset) {
			if(emp.getId()==id) {
				System.out.println(emp);
				found=true;
			}

		}
		if(!found) {
			System.out.println("Employee with this id is not present");
		}
	}
	//update the employee
	public void updateEmployee() {
		System.out.println("Enter id: ");
		id=sc.nextInt();
		boolean found=false;
		for(Employee emp:empset) {
			if(emp.getId()==id) {
				System.out.println("Enter name: ");
				name=sc.next();
				System.out.println("Enter new Salary");
				sal=sc.nextDouble();
				emp.setName(name);
				emp.setSalary(sal);
				System.out.println("Updated Details of employee are: ");
				System.out.println(emp);
				found=true;
			}
		}
		if(!found) {
			System.out.println("Employee is not present");
		}
		else {
			System.out.println("Employee details updated successfully !!");
		}
	}
	//delete emp
	public void deleteEmp() {
		System.out.println("Enter id");
		id=sc.nextInt();
		boolean found=false;
		Employee empdelete=null;
		for(Employee emp:empset) {
			if(emp.getId()==id) {
				empdelete=emp;
				found=true;
			}
		}
		if(!found) {
			System.out.println("Employee is not present");
		}
		else {
			empset.remove(empdelete);
			System.out.println("Employee deleted successfully!!");
		}
	}
	//add emp
	public void addEmp() {
		System.out.println("Enter id:");
		id=sc.nextInt();
		System.out.println("Enter name");
		name=sc.next();
		System.out.println("Enter age");
		age=sc.nextInt();
		System.out.println("enter Desiganation");
		desiganation=sc.next();
		System.out.println("Enter Department");
		department=sc.next();
		System.out.println("Enter sal");
		sc.nextDouble();

		Employee emp=new Employee(id, name, age, desiganation, department, sal);

		empset.add(emp);
		System.out.println(emp);
		System.out.println("Employtee addeed successsfully");

	}

	}

//main.java

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        EmployeeService employeeService = new EmployeeService();

        while (true) {
            System.out.println("**************** Welcome To Employee Management System ****************");
            System.out.println("1. Add Employee");
            System.out.println("2. View Employee");
            System.out.println("3. Update Employee");
            System.out.println("4. Delete Employee");
            System.out.println("5. View All Employees");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.println("Add Employee");
                    employeeService.addEmp();
                    break;
                case 2:
                    System.out.println("View Employee");
                    employeeService.viewEmp();
                    break;
                case 3:
                    System.out.println("Update Employee");
                    employeeService.updateEmployee();
                    break;
                case 4:
                    System.out.println("Delete Employee");
                    employeeService.deleteEmp();
                    break;
                case 5:
                    System.out.println("View All Employees");
                    employeeService.viewAllEmps();
                    break;
                case 6:
                    System.out.println("Thank you for using the application!");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Please enter a valid choice.");
                    break;
            }
        }
    }
}


//instructions
Employee Management Application Instructions
Employee Management Application Instructions

1. Introduction:
   - The Employee Management Application is designed to help HR personnel and managers manage employee records efficiently.

2. Usage:
   - Run the application by executing the "Main" class.
   - Follow the on-screen instructions to perform various tasks.

3. Menu Options:
   - 1. Add Employee: Add a new employee with details.
   - 2. View Employee: Retrieve employee details by ID.
   - 3. Update Employee: Modify an employee's information.
   - 4. Delete Employee: Remove an employee from the database.
   - 5. View All Employees: Display a list of all employees.
   - 6. Exit: Close the application.

4. Data Persistence:
   - Employee records are stored in memory and will be lost when the application is closed.

5. Instructions:
   - Follow the prompts and enter data as requested.
   - Ensure correct inputs to avoid errors.
   - Use option 6 to exit the application.

6. Enjoy using the Employee Management Application!

//requirements
Employee Management Application Requirements

Java Version:
- The application is built using Java and requires a compatible Java Runtime Environment (JRE).

Java Dependencies:
- No external Java libraries are required. The application uses standard Java libraries.

Operating System:
- The application is platform-independent and can be run on Windows, macOS, or Linux.

Installation:
- No installation is needed. Simply compile and run the provided Java source files.

Development Environment:
- To develop and modify the application, you'll need a Java Integrated Development Environment (IDE) such as Eclipse, IntelliJ IDEA, or Visual Studio Code.

